"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const errors = __importStar(require("./errors"));
// Throws an error if any option does not match its defined type or is undefined.
// Since command-line-args handles default values, a check for undefined-ness here
// results in a check for required options and ignores optional options.
const validateOptions = function ({ options, optionDefinitions }) {
    var _a;
    for (const optionDefinition of optionDefinitions) {
        const value = options[optionDefinition.name];
        const optionRequired = (_a = optionDefinition.isRequired) !== null && _a !== void 0 ? _a : false;
        if (optionRequired && value === undefined) {
            throw new errors.OptionMissing({
                message: `Option '${optionDefinition.name}' is missing.`,
                data: { optionDefinition }
            });
        }
        switch (optionDefinition.type) {
            case 'string':
            case 'boolean': {
                // String and boolean always work, since command-line-args handles them
                // so that no validation is necessary.
                break;
            }
            case 'number': {
                if (!optionRequired && value === undefined) {
                    break;
                }
                if (typeof value !== 'number' || Number.isNaN(value)) {
                    throw new errors.OptionInvalid({
                        message: `Option '${optionDefinition.name}' must be a number.`,
                        data: { optionDefinition }
                    });
                }
                break;
            }
            default: {
                throw new errors.InvalidOperation();
            }
        }
        if (value !== undefined && optionDefinition.validate) {
            try {
                optionDefinition.validate(value);
            }
            catch (ex) {
                throw new errors.OptionInvalid({
                    message: ex.message,
                    data: { optionDefinition }
                });
            }
        }
    }
};
exports.validateOptions = validateOptions;
