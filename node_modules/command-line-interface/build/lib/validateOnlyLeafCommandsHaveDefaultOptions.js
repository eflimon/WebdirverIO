"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOnlyLeafCommandsHaveDefaultOptions = void 0;
const errors = __importStar(require("./errors"));
const validateOnlyLeafCommandsHaveDefaultOptions = function ({ command, ancestorNames = [] }) {
    if (!('subcommands' in command) ||
        command.subcommands === undefined ||
        Object.keys(command.subcommands).length === 0) {
        return;
    }
    const commandPath = [...ancestorNames, command.name];
    for (const optionDefinition of command.optionDefinitions) {
        if (optionDefinition.defaultOption === true) {
            throw new errors.OptionInvalid(`Option '${optionDefinition.name}' in command '${commandPath.join(' ')}' may not be a default option, since the command has sub-commands.`);
        }
    }
    for (const subCommand of Object.values(command.subcommands)) {
        validateOnlyLeafCommandsHaveDefaultOptions({
            command: subCommand,
            ancestorNames: commandPath
        });
    }
};
exports.validateOnlyLeafCommandsHaveDefaultOptions = validateOnlyLeafCommandsHaveDefaultOptions;
