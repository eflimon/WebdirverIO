"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommandByPath = void 0;
const errors = __importStar(require("./errors"));
const getCommandByPath = function ({ rootCommand, commandPath }) {
    let command = rootCommand;
    if (commandPath[0] !== rootCommand.name) {
        throw new errors.InvalidOperation(`Can't find root command '${commandPath[0]}', root is actually named '${rootCommand.name}'.`);
    }
    for (const pathElement of commandPath.slice(1)) {
        if (command.subcommands === undefined) {
            throw new errors.CommandNotFound();
        }
        command = command.subcommands[pathElement];
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (command === undefined) {
            throw new errors.CommandNotFound();
        }
    }
    return command;
};
exports.getCommandByPath = getCommandByPath;
