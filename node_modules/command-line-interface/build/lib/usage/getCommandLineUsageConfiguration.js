"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommandLineUsageConfiguration = void 0;
const convertOptionDefinition_1 = require("../convertOptionDefinition");
const getCommandsByPath_1 = require("../getCommandsByPath");
const getCommandSynopsis_1 = require("./getCommandSynopsis");
const strip_indent_1 = __importDefault(require("strip-indent"));
const getCommandLineUsageConfiguration = function ({ rootCommand, commandPath }) {
    const commandsInPath = (0, getCommandsByPath_1.getCommandsByPath)({ rootCommand, commandPath });
    const command = commandsInPath.at(-1);
    const synopsis = commandsInPath.map((currentCommand) => (0, getCommandSynopsis_1.getCommandSynopsis)({ command: currentCommand })).join(' ');
    const usage = [
        {
            header: rootCommand.name,
            content: [command.description]
        }, {
            header: 'Synopsis',
            content: [synopsis]
        }
    ];
    if (command.optionDefinitions.length > 0) {
        usage.push({
            header: 'Options',
            optionList: command.optionDefinitions.map((optionDefinition) => {
                var _a;
                const convertedOptionDefinition = (0, convertOptionDefinition_1.convertOptionDefinition)({ optionDefinition });
                return {
                    ...convertedOptionDefinition,
                    description: optionDefinition.description,
                    typeLabel: `{underline ${(_a = optionDefinition.parameterName) !== null && _a !== void 0 ? _a : optionDefinition.type}}`
                };
            })
        });
    }
    if (command.subcommands && Object.keys(command.subcommands).length > 0) {
        usage.push({
            header: 'Commands',
            content: Object.entries(command.subcommands).map(([name, subcommand]) => ({
                name,
                description: subcommand.description
            }))
        });
    }
    if (command.remarks) {
        usage.push({
            header: 'Remarks',
            content: [(0, strip_indent_1.default)(command.remarks).trim()]
        });
    }
    return usage;
};
exports.getCommandLineUsageConfiguration = getCommandLineUsageConfiguration;
