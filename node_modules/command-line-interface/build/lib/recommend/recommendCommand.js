"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recommendCommand = void 0;
const getCommandByPath_1 = require("../getCommandByPath");
const string_similarity_1 = __importDefault(require("string-similarity"));
const errors = __importStar(require("../errors"));
const recommendCommand = function ({ rootCommand, commandPath }) {
    const goodPath = commandPath.slice(0, -1);
    const unrecognizedCommand = commandPath.at(-1);
    const goodCommand = (0, getCommandByPath_1.getCommandByPath)({ rootCommand, commandPath: goodPath });
    if (goodCommand.subcommands === undefined) {
        throw new errors.NoSuggestionAvailable();
    }
    const availableCommands = Object.keys(goodCommand.subcommands);
    const suggestion = string_similarity_1.default.findBestMatch(unrecognizedCommand, availableCommands);
    const recommendedCommand = suggestion.bestMatch.target;
    return recommendedCommand;
};
exports.recommendCommand = recommendCommand;
